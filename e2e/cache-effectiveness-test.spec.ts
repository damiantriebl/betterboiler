import { test, expect } from '@playwright/test';
import { setupAuthenticatedUser } from './helpers/auth-helper';

test.describe('Cache Effectiveness - Direct Comparison', () => {
  
  test('üî¨ Comparar getMotorcycles (sin cache) vs getMotorcyclesOptimized (con cache)', async ({ page, context }) => {
    console.log('üî¨ Test directo: Sin cache vs Con cache...');
    
    await setupAuthenticatedUser(page);
    
    // üî• M√âTODO 1: Forzar sin cache (simulando primera visita)
    console.log('üóëÔ∏è Limpiando todo el cache del browser...');
    await context.clearCookies();
    await context.clearPermissions();
    await page.evaluate(() => {
      localStorage.clear();
      sessionStorage.clear();
    });
    
    // Forzar recompile del cache de Next.js esperando 61 segundos (TTL expirado)
    console.log('‚è≥ Esperando TTL del cache (65 segundos)...');
    await page.waitForTimeout(65000); // Esperar que expire el cache de 60s
    
    // 1Ô∏è‚É£ MEDICI√ìN SIN CACHE (COLD START TOTAL)
    console.log('1Ô∏è‚É£ Midiendo sin cache (cold start total)...');
    const noCacheStart = Date.now();
    await page.goto('/sales', { waitUntil: 'domcontentloaded' });
    await page.waitForSelector('h1:has-text("Cat√°logo de Motos")', { timeout: 15000 });
    const noCacheTime = Date.now() - noCacheStart;
    
    const noCacheRows = await page.locator('tbody tr').count();
    console.log(`üóëÔ∏è Sin cache: ${noCacheTime}ms (${noCacheRows} rows)`);
    
    // 2Ô∏è‚É£ MEDICI√ìN CON CACHE (WARM START)
    console.log('2Ô∏è‚É£ Midiendo con cache (warm start)...');
    const withCacheStart = Date.now();
    await page.reload({ waitUntil: 'domcontentloaded' });
    await page.waitForSelector('h1:has-text("Cat√°logo de Motos")', { timeout: 15000 });
    const withCacheTime = Date.now() - withCacheStart;
    
    const withCacheRows = await page.locator('tbody tr').count();
    console.log(`üíæ Con cache: ${withCacheTime}ms (${withCacheRows} rows)`);
    
    // 3Ô∏è‚É£ M√öLTIPLES CARGAS CON CACHE PARA CONFIRMAR
    console.log('3Ô∏è‚É£ Verificando consistencia del cache...');
    const cacheTimes: number[] = [];
    
    for (let i = 1; i <= 3; i++) {
      const start = Date.now();
      await page.reload({ waitUntil: 'domcontentloaded' });
      await page.waitForSelector('h1:has-text("Cat√°logo de Motos")', { timeout: 15000 });
      const time = Date.now() - start;
      cacheTimes.push(time);
      console.log(`üíæ Cache ${i}: ${time}ms`);
      await page.waitForTimeout(1000); // Pausa peque√±a
    }
    
    const avgCacheTime = cacheTimes.reduce((sum, t) => sum + t, 0) / cacheTimes.length;
    
    // üìä AN√ÅLISIS FINAL
    const improvement = noCacheTime - avgCacheTime;
    const improvementPercent = (improvement / noCacheTime) * 100;
    
    console.log('\nüî¨ AN√ÅLISIS DIRECTO DE EFECTIVIDAD:');
    console.log(`üóëÔ∏è Sin cache (cold): ${noCacheTime}ms`);
    console.log(`üíæ Con cache (warm): ${withCacheTime}ms`);
    console.log(`üìä Promedio cache: ${avgCacheTime.toFixed(1)}ms`);
    console.log(`‚ö° Mejora total: ${improvement.toFixed(1)}ms (${improvementPercent.toFixed(1)}%)`);
    
    // üéØ DETERMINACI√ìN CIENT√çFICA
    if (improvement > 500) {
      console.log('üéâ ¬°CACHE MUY EFECTIVO! Mejora significativa detectada');
    } else if (improvement > 200) {
      console.log('‚úÖ Cache efectivo con buena mejora');
    } else if (improvement > 50) {
      console.log('‚ö° Cache funcionando con mejora moderada');
    } else if (improvement > 0) {
      console.log('üìä Cache con mejora leve (posible overhead de testing)');
    } else {
      console.log('‚ö†Ô∏è Cache no muestra mejora - revisar implementaci√≥n');
    }
    
    // Verificaciones
    expect(noCacheRows).toEqual(withCacheRows); // Mismos datos
    expect(noCacheRows).toBeGreaterThan(0); // Hay datos
    expect(noCacheTime).toBeGreaterThan(0);
    expect(avgCacheTime).toBeGreaterThan(0);
  });

  test('‚ö° Test r√°pido de efectividad del cache (sin TTL wait)', async ({ page }) => {
    console.log('‚ö° Test r√°pido de cache...');
    
    await setupAuthenticatedUser(page);
    
    // 1Ô∏è‚É£ PRIMERA CARGA
    console.log('1Ô∏è‚É£ Primera carga...');
    const firstStart = Date.now();
    await page.goto('/sales', { waitUntil: 'domcontentloaded' });
    await page.waitForSelector('h1:has-text("Cat√°logo de Motos")', { timeout: 15000 });
    const firstTime = Date.now() - firstStart;
    
    // 2Ô∏è‚É£ CARGAS SUBSECUENTES (R√ÅPIDAS)
    const subsequentTimes: number[] = [];
    
    for (let i = 1; i <= 5; i++) {
      console.log(`üîÑ Carga subsecuente ${i}...`);
      const start = Date.now();
      await page.reload({ waitUntil: 'domcontentloaded' });
      await page.waitForSelector('h1:has-text("Cat√°logo de Motos")', { timeout: 15000 });
      const time = Date.now() - start;
      subsequentTimes.push(time);
      console.log(`‚ö° Tiempo ${i}: ${time}ms`);
      
      // Sin pausa para maximizar beneficio del cache
    }
    
    const avgSubsequent = subsequentTimes.reduce((sum, t) => sum + t, 0) / subsequentTimes.length;
    const minSubsequent = Math.min(...subsequentTimes);
    const maxSubsequent = Math.max(...subsequentTimes);
    
    const improvement = firstTime - avgSubsequent;
    const improvementPercent = (improvement / firstTime) * 100;
    
    console.log('\n‚ö° AN√ÅLISIS R√ÅPIDO:');
    console.log(`üóëÔ∏è Primera carga: ${firstTime}ms`);
    console.log(`üìä Promedio subsecuentes: ${avgSubsequent.toFixed(1)}ms`);
    console.log(`üèÜ Mejor tiempo: ${minSubsequent}ms`);
    console.log(`üò¥ Peor tiempo: ${maxSubsequent}ms`);
    console.log(`‚ö° Mejora: ${improvement.toFixed(1)}ms (${improvementPercent.toFixed(1)}%)`);
    console.log(`üìà Variabilidad: ¬±${((maxSubsequent - minSubsequent) / 2).toFixed(1)}ms`);
    
    // An√°lisis de consistencia
    const variability = (maxSubsequent - minSubsequent) / avgSubsequent * 100;
    if (variability < 20) {
      console.log('‚úÖ Cache muy consistente (baja variabilidad)');
    } else if (variability < 50) {
      console.log('‚ö° Cache consistente');
    } else {
      console.log('‚ö†Ô∏è Cache con variabilidad alta');
    }
    
    expect(firstTime).toBeGreaterThan(0);
    expect(avgSubsequent).toBeGreaterThan(0);
    expect(subsequentTimes.length).toBe(5);
  });
}); 