import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function assignOrganizationToUser() {
  try {
    console.log('üîç Buscando usuarios sin organizaci√≥n...');
    
    // Buscar usuarios sin organizaci√≥n
    const usersWithoutOrg = await prisma.user.findMany({
      where: {
        organizationId: null
      },
      select: {
        id: true,
        email: true,
        name: true,
        role: true
      }
    });

    console.log(`üìä Usuarios sin organizaci√≥n encontrados: ${usersWithoutOrg.length}`);
    usersWithoutOrg.forEach(user => {
      console.log(`  - ${user.email} (${user.name}) - Rol: ${user.role}`);
    });

    if (usersWithoutOrg.length === 0) {
      console.log('‚úÖ Todos los usuarios ya tienen organizaci√≥n asignada');
      return;
    }

    // Buscar organizaciones existentes
    const organizations = await prisma.organization.findMany({
      select: {
        id: true,
        name: true,
        slug: true
      }
    });

    console.log(`üìä Organizaciones disponibles: ${organizations.length}`);
    organizations.forEach(org => {
      console.log(`  - ${org.name} (${org.slug})`);
    });

    let targetOrganization;

    if (organizations.length === 0) {
      // Crear organizaci√≥n por defecto si no existe ninguna
      console.log('üè¢ Creando organizaci√≥n por defecto...');
      targetOrganization = await prisma.organization.create({
        data: {
          name: 'Organizaci√≥n Principal',
          slug: 'organizacion-principal'
        }
      });
      console.log(`‚úÖ Organizaci√≥n creada: ${targetOrganization.name}`);
    } else {
      // Usar la primera organizaci√≥n existente
      targetOrganization = organizations[0];
      console.log(`üéØ Usando organizaci√≥n existente: ${targetOrganization.name}`);
    }

    // Asignar la organizaci√≥n a todos los usuarios sin organizaci√≥n
    console.log('üîÑ Asignando organizaci√≥n a usuarios...');
    
    for (const user of usersWithoutOrg) {
      await prisma.user.update({
        where: { id: user.id },
        data: { organizationId: targetOrganization.id }
      });
      console.log(`‚úÖ Usuario ${user.email} asignado a ${targetOrganization.name}`);
    }

    console.log('üéâ ¬°Proceso completado exitosamente!');
    
  } catch (error) {
    console.error('‚ùå Error en el proceso:', error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

// Ejecutar directamente
assignOrganizationToUser()
  .then(() => {
    console.log('‚úÖ Script ejecutado correctamente');
    process.exit(0);
  })
  .catch((error) => {
    console.error('‚ùå Error ejecutando script:', error);
    process.exit(1);
  });

export { assignOrganizationToUser }; 