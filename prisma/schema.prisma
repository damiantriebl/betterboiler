generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id                   String   @id @default(cuid()) @map("_id")
  token                String   @unique
  userId               String
  expiresAt            DateTime
  ipAddress            String?
  userAgent            String?
  impersonatedBy       String?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  activeOrganizationId String?
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  paymentStatus        String?

  @@map("session")
}

model Account {
  id                    String    @id @default(cuid()) @map("_id")
  userId                String
  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  idToken               String?
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String   @id @default(cuid()) @map("_id")
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("verification")
}

model Jwks {
  id         String   @id @map("_id")
  publicKey  String
  privateKey String
  createdAt  DateTime

  @@map("jwks")
}

model Organization {
  id                         String                      @id @default(cuid()) @map("_id")
  name                       String
  slug                       String?                     @unique
  logo                       String?
  createdAt                  DateTime                    @default(now())
  metadata                   String?
  thumbnail                  String?
  bankCards                  BankCard[]
  bankingPromotions          BankingPromotion[]
  currentAccounts            CurrentAccount[]
  motoColors                 MotoColor[]
  organizationBrands         OrganizationBrand[]
  organizationModelConfigs   OrganizationModelConfig[]
  organizationPaymentCards   OrganizationPaymentCard[]
  organizationPaymentMethods OrganizationPaymentMethod[]
  payments                   Payment[]
  reservations               Reservation[]
  sucursales                 Sucursal[]
  suppliers                  Supplier[]
  motorcycles                Motorcycle[]
  users                      User[]

  @@map("organization")
}

model User {
  id                      String        @id @default(cuid()) @map("_id")
  name                    String
  email                   String        @unique
  emailVerified           Boolean       @default(false)
  profileOriginal         String?
  profileCrop             String?
  profileOriginalVariants String[]
  profileCropVariants     String[]
  premium                 Boolean       @default(false)
  role                    String        @default("user")
  banned                  Boolean       @default(false)
  banReason               String?
  banExpires              Int?
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt
  organizationId          String?
  accounts                Account[]
  sales                   Motorcycle[]  @relation("MotorcycleSales")
  sessions                Session[]
  organization            Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("user")
}

model Brand {
  id                 Int                 @id @default(autoincrement())
  name               String              @unique
  color              String?
  models             Model[]
  organizationBrands OrganizationBrand[]
  motorcycles        Motorcycle[]
}

model Model {
  id                       Int                       @id @default(autoincrement())
  name                     String
  brandId                  Int
  additionalFilesJson      String?
  imageUrl                 String?
  specSheetUrl             String?
  createdAt                DateTime                  @default(now())
  updatedAt                DateTime                  @default(now()) @updatedAt
  brand                    Brand                     @relation(fields: [brandId], references: [id])
  files                    ModelFile[]
  organizationModelConfigs OrganizationModelConfig[]
  motorcycles              Motorcycle[]

  @@unique([name, brandId])
  @@index([brandId])
}

model ModelFile {
  id         String   @id @default(cuid())
  name       String
  url        String
  type       String
  modelId    Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  s3Key      String
  s3KeySmall String?
  size       Int
  model      Model    @relation(fields: [modelId], references: [id], onDelete: Cascade)

  @@index([modelId])
}

model MotoColor {
  id             Int          @id @default(autoincrement())
  order          Int          @default(0)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organizationId String
  colorOne       String
  colorTwo       String?
  name           String
  type           String
  isGlobal       Boolean      @default(false)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  motorcycles    Motorcycle[]

  @@unique([organizationId, name])
  @@index([organizationId, order])
  @@index([organizationId, isGlobal])
}

model OrganizationBrand {
  id             Int          @id @default(autoincrement())
  organizationId String
  brandId        Int
  order          Int          @default(0)
  color          String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  brand          Brand        @relation(fields: [brandId], references: [id], onDelete: Cascade)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([organizationId, brandId])
  @@index([organizationId, order])
  @@index([brandId])
}

model OrganizationModelConfig {
  id             Int          @id @default(autoincrement())
  organizationId String
  modelId        Int
  order          Int          @default(0)
  isVisible      Boolean      @default(true)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  model          Model        @relation(fields: [modelId], references: [id], onDelete: Cascade)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([organizationId, modelId])
  @@index([organizationId, modelId, order])
  @@index([modelId])
}

model Sucursal {
  id             Int          @id @default(autoincrement())
  name           String
  order          Int
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  motorcycles    Motorcycle[]

  @@unique([organizationId, name])
  @@index([organizationId, order])
}

model Supplier {
  id                   Int          @id @default(autoincrement())
  legalName            String
  commercialName       String?
  taxIdentification    String       @unique
  vatCondition         String
  voucherType          String
  grossIncome          String?
  localTaxRegistration String?
  contactName          String?
  contactPosition      String?
  landlineNumber       String?
  mobileNumber         String?
  email                String?
  website              String?
  legalAddress         String?
  commercialAddress    String?
  deliveryAddress      String?
  bank                 String?
  accountTypeNumber    String?
  cbu                  String?
  bankAlias            String?
  swiftBic             String?
  paymentCurrency      String?
  paymentMethods       String[]
  paymentTermDays      Int?
  discountsConditions  String?
  creditLimit          Float?
  returnPolicy         String?
  shippingMethods      String?
  shippingCosts        String?
  deliveryTimes        String?
  transportConditions  String?
  itemsCategories      String?
  certifications       String?
  commercialReferences String?
  status               String       @default("activo")
  notesObservations    String?
  organizationId       String
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt
  organization         Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  motorcycles          Motorcycle[]

  @@unique([organizationId, taxIdentification])
  @@index([organizationId])
  @@index([organizationId, status])
}

model Client {
  id              String           @id @default(cuid())
  type            String
  firstName       String
  lastName        String?
  companyName     String?
  taxId           String
  email           String
  phone           String?
  mobile          String?
  address         String?
  vatStatus       String?
  status          String           @default("activo")
  notes           String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  currentAccounts CurrentAccount[]
  reservations    Reservation[]
  motorcycles     Motorcycle[]
}

model Motorcycle {
  id              Int              @id @default(autoincrement())
  chassisNumber   String           @unique
  engineNumber    String?          @unique
  year            Int
  mileage         Int              @default(0)
  costPrice       Float?
  retailPrice     Float
  wholesalePrice  Float?
  licensePlate    String?
  observations    String?
  imageUrl        String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  brandId         Int
  modelId         Int
  colorId         Int
  branchId        Int
  supplierId      Int?
  organizationId  String
  displacement    Int?
  currency        String           @default("ARS")
  clientId        String?
  state           MotorcycleState  @default(STOCK)
  sellerId        String?
  soldAt          DateTime?
  currentAccounts CurrentAccount[]
  reservations    Reservation[]
  branch          Sucursal         @relation(fields: [branchId], references: [id])
  brand           Brand            @relation(fields: [brandId], references: [id])
  client          Client?          @relation(fields: [clientId], references: [id])
  color           MotoColor        @relation(fields: [colorId], references: [id])
  model           Model            @relation(fields: [modelId], references: [id])
  organization    Organization     @relation(fields: [organizationId], references: [id])
  seller          User?            @relation("MotorcycleSales", fields: [sellerId], references: [id])
  supplier        Supplier?        @relation(fields: [supplierId], references: [id])

  @@index([brandId])
  @@index([modelId])
  @@index([colorId])
  @@index([branchId])
  @@index([supplierId])
  @@index([organizationId])
  @@index([state])
  @@index([sellerId])
  @@map("motorcycle")
}

model Reservation {
  id             Int          @id @default(autoincrement())
  amount         Float
  expirationDate DateTime?
  notes          String?
  paymentMethod  String?
  status         String       @default("active")
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  motorcycleId   Int
  clientId       String
  organizationId String
  currency       String       @default("USD")
  client         Client       @relation(fields: [clientId], references: [id])
  motorcycle     Motorcycle   @relation(fields: [motorcycleId], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id])

  @@index([motorcycleId])
  @@index([clientId])
  @@index([organizationId])
  @@index([status])
  @@index([expirationDate])
}

model PaymentCard {
  id                       Int                       @id @default(autoincrement())
  name                     String                    @unique
  type                     String
  issuer                   String
  logoUrl                  String?
  createdAt                DateTime                  @default(now())
  updatedAt                DateTime                  @updatedAt
  bankingPromotions        BankingPromotion[]
  organizationPaymentCards OrganizationPaymentCard[]
}

model OrganizationPaymentCard {
  id             Int          @id @default(autoincrement())
  organizationId String
  cardId         Int
  isEnabled      Boolean      @default(true)
  order          Int          @default(0)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  card           PaymentCard  @relation(fields: [cardId], references: [id], onDelete: Cascade)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([organizationId, cardId])
  @@index([organizationId, order])
  @@index([cardId])
}

model PaymentMethod {
  id                         Int                         @id @default(autoincrement())
  name                       String
  type                       String                      @unique
  description                String
  iconUrl                    String?
  createdAt                  DateTime                    @default(now())
  updatedAt                  DateTime                    @updatedAt
  bankingPromotions          BankingPromotion[]
  organizationPaymentMethods OrganizationPaymentMethod[]
}

model OrganizationPaymentMethod {
  id             Int           @id @default(autoincrement())
  organizationId String
  methodId       Int
  isEnabled      Boolean       @default(true)
  order          Int           @default(0)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  method         PaymentMethod @relation(fields: [methodId], references: [id], onDelete: Cascade)
  organization   Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([organizationId, methodId])
}

model Bank {
  id                Int                @id @default(autoincrement())
  name              String             @unique
  logoUrl           String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  bankCards         BankCard[]
  bankingPromotions BankingPromotion[]
}

model CardType {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  type      String
  logoUrl   String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  bankCards BankCard[]
}

model BankingPromotion {
  id               Int               @id @default(autoincrement())
  name             String
  description      String?
  organizationId   String
  paymentMethodId  Int
  cardId           Int?
  bankId           Int?
  bankCardId       Int?
  discountRate     Float?
  surchargeRate    Float?
  minAmount        Float?
  maxAmount        Float?
  isEnabled        Boolean           @default(true)
  startDate        DateTime?
  endDate          DateTime?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  activeDays       String[]
  bankCard         BankCard?         @relation(fields: [bankCardId], references: [id])
  bank             Bank?             @relation(fields: [bankId], references: [id])
  card             PaymentCard?      @relation(fields: [cardId], references: [id])
  organization     Organization      @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  paymentMethod    PaymentMethod     @relation(fields: [paymentMethodId], references: [id], onDelete: Cascade)
  installmentPlans InstallmentPlan[]

  @@index([organizationId])
  @@index([paymentMethodId])
  @@index([bankCardId])
  @@index([cardId])
  @@index([bankId])
}

model InstallmentPlan {
  id                 Int              @id @default(autoincrement())
  bankingPromotionId Int
  installments       Int
  interestRate       Float
  isEnabled          Boolean          @default(true)
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  bankingPromotion   BankingPromotion @relation(fields: [bankingPromotionId], references: [id], onDelete: Cascade)

  @@unique([bankingPromotionId, installments])
}

model BankCard {
  id                Int                @id @default(autoincrement())
  bankId            Int
  cardTypeId        Int
  organizationId    String
  isEnabled         Boolean            @default(true)
  order             Int                @default(0)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  bank              Bank               @relation(fields: [bankId], references: [id], onDelete: Cascade)
  cardType          CardType           @relation(fields: [cardTypeId], references: [id], onDelete: Cascade)
  organization      Organization       @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  bankingPromotions BankingPromotion[]

  @@unique([bankId, cardTypeId, organizationId])
  @@index([organizationId])
  @@index([bankId])
  @@index([cardTypeId])
}

model CurrentAccount {
  id                   String               @id @default(cuid())
  clientId             String
  totalAmount          Float
  downPayment          Float
  numberOfInstallments Int
  installmentAmount    Float
  paymentFrequency     PaymentFrequency
  startDate            DateTime
  endDate              DateTime?
  status               CurrentAccountStatus @default(ACTIVE)
  reminderLeadTimeDays Int?                 @default(3)
  notes                String?
  organizationId       String
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
  motorcycleId         Int
  nextDueDate          DateTime?
  remainingAmount      Float
  interestRate         Float?
  currency             String?              @default("ARS")
  client               Client               @relation(fields: [clientId], references: [id], onDelete: Cascade)
  motorcycle           Motorcycle           @relation(fields: [motorcycleId], references: [id])
  organization         Organization         @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  payments             Payment[]

  @@index([clientId])
  @@index([motorcycleId])
  @@index([organizationId])
  @@index([status])
}

model Payment {
  id                   String          @id @default(cuid())
  currentAccountId     String?
  paymentDate          DateTime?
  paymentMethod        String?
  notes                String?
  organizationId       String
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt
  amountPaid           Float
  transactionReference String?
  installmentNumber    Int?   
  installmentVersion   String?
  status               PaymentStatus   @default(PENDING)
  currentAccount       CurrentAccount? @relation(fields: [currentAccountId], references: [id])
  organization         Organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([currentAccountId])
  @@index([organizationId])
}

enum MotorcycleState {
  STOCK
  VENDIDO
  PAUSADO
  RESERVADO
  PROCESANDO
  ELIMINADO
}

enum PaymentFrequency {
  WEEKLY
  BIWEEKLY
  MONTHLY
  QUARTERLY
  ANNUALLY
}

enum CurrentAccountStatus {
  ACTIVE
  PAID_OFF
  OVERDUE
  DEFAULTED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  CANCELLED
  PROCESSING
  FAILED
  PARTIAL
}
