// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(cuid()) @map("_id")
  name              String
  email             String    @unique
  emailVerified     Boolean   @default(false)
  profileOriginal   String?  
  profileCrop       String?   
  premium           Boolean   @default(false)
  role              String    @default("user")
  banned            Boolean   @default(false)
  banReason         String?
  banExpires        Int? /// Unix timestamp for ban expiration
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  sessions          Session[]
  accounts          Account[]

  organizationId String?      // Hacer opcional el campo organizationId
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("user")
}

model Session {
  id             String   @id @default(cuid()) @map("_id")
  token          String   @unique
  userId         String
  expiresAt      DateTime
  ipAddress      String?
  userAgent      String?
  impersonatedBy String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  activeOrganizationId String?

  @@map("session")
}

model Account {
  id                    String    @id @default(cuid()) @map("_id")
  userId                String
  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  idToken String?

  @@map("account")
}

model Verification {
  id         String   @id @default(cuid()) @map("_id")
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("verification")
}

model Jwks {
  id         String   @id @map("_id")
  publicKey  String
  privateKey String
  createdAt  DateTime

  @@map("jwks")
}

model Organization {
  id          String    @id @default(cuid()) @map("_id")
  name        String
  slug        String?   @unique
  logo        String?
  createdAt   DateTime  @default(now())
  metadata    String?
  users       User[]

  @@map("organization")
}

