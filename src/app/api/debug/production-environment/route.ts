import { requireOrganizationId } from "@/actions/util";
import { type NextRequest, NextResponse } from "next/server";

export async function GET(request: NextRequest) {
  try {
    const organizationId = await requireOrganizationId();
    if (!organizationId) {
      return NextResponse.json({ error: "No autorizado" }, { status: 401 });
    }

    console.log("üåê [PRODUCTION-ENV] Analizando entorno de producci√≥n...");

    // 1. Verificar entorno
    const isProduction = process.env.NODE_ENV === "production";
    const isVercel = !!process.env.VERCEL;
    const domain =
      process.env.VERCEL_URL || process.env.BASE_URL || process.env.NEXT_PUBLIC_APP_URL;
    const currentDomain = request.headers.get("host");

    // 2. Verificar credenciales
    const accessToken = process.env.MERCADOPAGO_ACCESS_TOKEN;
    const publicKey = process.env.MERCADOPAGO_PUBLIC_KEY;
    const clientId = process.env.MERCADOPAGO_CLIENT_ID;
    const clientSecret = process.env.MERCADOPAGO_CLIENT_SECRET;

    const envAnalysis = {
      environment: {
        nodeEnv: process.env.NODE_ENV,
        isProduction,
        isVercel,
        currentDomain,
        configuredDomain: domain,
        vercelUrl: process.env.VERCEL_URL,
        baseUrl: process.env.BASE_URL,
        publicUrl: process.env.NEXT_PUBLIC_APP_URL,
      },
      credentials: {
        hasAccessToken: !!accessToken,
        hasPublicKey: !!publicKey,
        hasClientId: !!clientId,
        hasClientSecret: !!clientSecret,
        accessTokenType: accessToken
          ? accessToken.startsWith("APP_USR-")
            ? "PRODUCCI√ìN"
            : accessToken.startsWith("TEST-")
              ? "TEST"
              : "DESCONOCIDO"
          : "NO_CONFIGURADO",
        publicKeyType: publicKey
          ? publicKey.startsWith("APP_USR-")
            ? "PRODUCCI√ìN"
            : publicKey.startsWith("TEST-")
              ? "TEST"
              : "DESCONOCIDO"
          : "NO_CONFIGURADO",
      },
    };

    // 3. Verificar URLs de aplicaci√≥n
    const expectedUrls = {
      callback: `https://${currentDomain}/api/configuration/mercadopago/callback`,
      webhook: `https://${currentDomain}/api/webhooks/mercadopago`,
      processPayment: `https://${currentDomain}/api/mercadopago/process-payment`,
    };

    // 4. Test de conectividad MercadoPago
    let mpConnectivityTest = null;
    if (accessToken) {
      try {
        console.log("üß™ [PRODUCTION-ENV] Probando conectividad con MercadoPago...");

        const response = await fetch("https://api.mercadopago.com/users/me", {
          headers: {
            Authorization: `Bearer ${accessToken}`,
            "Content-Type": "application/json",
          },
        });

        const userData = await response.json();

        mpConnectivityTest = {
          status: response.status,
          success: response.ok,
          userData: response.ok
            ? {
                id: userData.id,
                email: userData.email,
                site_id: userData.site_id,
                country_id: userData.country_id,
                live_mode: userData.live_mode,
              }
            : null,
          error: !response.ok ? userData : null,
        };
      } catch (error) {
        mpConnectivityTest = {
          status: "ERROR",
          success: false,
          error: error instanceof Error ? error.message : "Error de conexi√≥n",
        };
      }
    }

    // 5. Verificar configuraci√≥n de aplicaci√≥n en MP
    let appStatusTest = null;
    if (accessToken?.startsWith("APP_USR-")) {
      try {
        console.log("üè≠ [PRODUCTION-ENV] Verificando estado de aplicaci√≥n en MercadoPago...");

        // Verificar applications endpoint
        const appResponse = await fetch("https://api.mercadopago.com/applications", {
          headers: {
            Authorization: `Bearer ${accessToken}`,
            "Content-Type": "application/json",
          },
        });

        const appData = await appResponse.json();

        appStatusTest = {
          status: appResponse.status,
          success: appResponse.ok,
          data: appResponse.ok ? appData : null,
          error: !appResponse.ok ? appData : null,
        };
      } catch (error) {
        appStatusTest = {
          status: "ERROR",
          success: false,
          error: error instanceof Error ? error.message : "Error verificando aplicaci√≥n",
        };
      }
    }

    // 6. Generar problemas y soluciones espec√≠ficos para producci√≥n
    const problems = [];
    const solutions = [];

    // Problemas de entorno
    if (!isProduction) {
      problems.push('‚ö†Ô∏è NODE_ENV no est√° configurado como "production"');
      solutions.push("üîß Configura NODE_ENV=production en Vercel");
    }

    // Problemas de credenciales
    if (!accessToken || !publicKey) {
      problems.push("‚ùå Credenciales de MercadoPago no configuradas en Vercel");
      solutions.push("üîß Configura variables de entorno en Vercel Dashboard");
    }

    if (accessToken && !accessToken.startsWith("APP_USR-")) {
      problems.push("‚ùå Usando credenciales TEST en ambiente de producci√≥n");
      solutions.push("üîß Cambia a credenciales de PRODUCCI√ìN (APP_USR-) en Vercel");
    }

    // Problemas de conectividad
    if (mpConnectivityTest && !mpConnectivityTest.success) {
      problems.push("‚ùå No se puede conectar con la API de MercadoPago");
      if (mpConnectivityTest.error?.message?.includes("unauthorized")) {
        solutions.push(
          "üîß Verifica que tu aplicaci√≥n est√© ACTIVADA para producci√≥n en MercadoPago",
        );
        solutions.push("üîß Completa las certificaciones requeridas");
      } else {
        solutions.push("üîß Verifica que las credenciales sean v√°lidas");
      }
    }

    // Problemas de configuraci√≥n de aplicaci√≥n
    if (appStatusTest && !appStatusTest.success) {
      problems.push("‚ùå Aplicaci√≥n no configurada correctamente en MercadoPago");
      solutions.push("üîß Configura URLs de callback en tu aplicaci√≥n de MercadoPago");
      solutions.push("üîß Activa tu aplicaci√≥n para producci√≥n");
    }

    // 7. Preparar respuesta
    return NextResponse.json({
      diagnosis: "An√°lisis espec√≠fico para entorno de producci√≥n (Vercel)",
      envAnalysis,
      expectedUrls,
      mpConnectivityTest,
      appStatusTest,
      problems,
      solutions,
      vercelSpecificSteps: [
        "1. üåê Ve a Vercel Dashboard ‚Üí tu-proyecto ‚Üí Settings ‚Üí Environment Variables",
        "2. üîë Agrega/verifica las variables MERCADOPAGO_* como Production",
        "3. üîÑ Redeploy tu aplicaci√≥n despu√©s de cambiar variables",
        "4. üß™ Prueba el endpoint de diagn√≥stico en producci√≥n",
        "5. üîó Configura URLs de producci√≥n en MercadoPago",
      ],
      mercadopagoSteps: [
        "1. üì± Ve a https://www.mercadopago.com.ar/developers/panel/applications",
        "2. üìù Selecciona tu aplicaci√≥n",
        `3. üîó Configura Redirect URI: ${expectedUrls.callback}`,
        `4. üîî Configura Webhook URL: ${expectedUrls.webhook}`,
        "5. ‚úÖ Activa tu aplicaci√≥n para PRODUCCI√ìN",
        "6. üéØ Completa las certificaciones requeridas",
      ],
      testUrls: {
        productionDiagnostic: `https://${currentDomain}/debug/unauthorized-fix`,
        testSandbox: `https://${currentDomain}/api/payments/mercadopago/test`,
        testProduction: `https://${currentDomain}/api/payments/mercadopago/test-production`,
        configurationPage: `https://${currentDomain}/configuration`,
      },
      critical:
        problems.length > 0
          ? "Se detectaron problemas cr√≠ticos que impiden el funcionamiento en producci√≥n"
          : "Configuraci√≥n b√°sica correcta - revisar problemas espec√≠ficos de MercadoPago",
    });
  } catch (error) {
    console.error("üí• [PRODUCTION-ENV] Error:", error);
    return NextResponse.json(
      {
        error: "Error interno del servidor",
        details: error instanceof Error ? error.message : "Error desconocido",
      },
      { status: 500 },
    );
  }
}
